/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unisc.ui;

import br.unisc.communication.BitRule;
import br.unisc.communication.CRCRules;
import br.unisc.communication.HammingRules;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arthurhoch
 */
public class Show extends javax.swing.JFrame {

    private final HammingRules hammingRules;
    private boolean type = true;
    /**
     * Creates new form ShowHamming
     */
    public Show() {
        initComponents();
        hammingRules = new HammingRules();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        try {
            buttonGroup1 =(javax.swing.ButtonGroup)java.beans.Beans.instantiate(getClass().getClassLoader(), "br/unisc/ui.Show_buttonGroup1");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        jTabbedPane1 = new javax.swing.JTabbedPane();
        HammingPanel = new javax.swing.JPanel();
        writeTextLabel = new javax.swing.JLabel();
        userInputTextField = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();
        errorSetSlider = new javax.swing.JSlider();
        send2DoHamming = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        setWrongHammingTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        errorPorcentLabel = new javax.swing.JLabel();
        CRCPanel = new javax.swing.JPanel();
        MessageLabel = new javax.swing.JLabel();
        MessageTextField = new javax.swing.JFormattedTextField();
        PolinomioLabel = new javax.swing.JLabel();
        PolinomioTextField = new javax.swing.JFormattedTextField();
        GenerateButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        CrcTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        BitsTextField = new javax.swing.JTextField();
        MessageBitsLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        BitsTable = new javax.swing.JTable();
        BitButton = new javax.swing.JButton();
        ParRadioButton = new javax.swing.JRadioButton();
        ImparRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hamming");
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(889, 420));
        setResizable(false);

        writeTextLabel.setText("Write your message here:");

        userInputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInputTextFieldActionPerformed(evt);
            }
        });

        errorLabel.setText("Error %:");

        errorSetSlider.setValue(0);
        errorSetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                errorSetSliderStateChanged(evt);
            }
        });

        send2DoHamming.setText("Send");
        send2DoHamming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send2DoHammingActionPerformed(evt);
            }
        });

        inputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Letter", "Bytes", "Hamming"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inputTable.setToolTipText("");
        inputTable.setAutoscrolls(false);
        inputTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                inputTablePropertyChange(evt);
            }
        });
        inputTable.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                inputTableVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(inputTable);

        setWrongHammingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Wrong Hamming"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(setWrongHammingTable);

        jScrollPane3.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jScrollPane3PropertyChange(evt);
            }
        });

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Letter", "Bytes", "Error"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(outputTable);

        errorPorcentLabel.setText(errorSetSlider.getToolTipText());

        javax.swing.GroupLayout HammingPanelLayout = new javax.swing.GroupLayout(HammingPanel);
        HammingPanel.setLayout(HammingPanelLayout);
        HammingPanelLayout.setHorizontalGroup(
            HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HammingPanelLayout.createSequentialGroup()
                .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HammingPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(errorLabel)
                        .addGap(30, 30, 30)
                        .addComponent(errorPorcentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(errorSetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(send2DoHamming))
                    .addGroup(HammingPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(HammingPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HammingPanelLayout.createSequentialGroup()
                                .addComponent(writeTextLabel)
                                .addGap(15, 15, 15)))))
                .addContainerGap())
        );
        HammingPanelLayout.setVerticalGroup(
            HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HammingPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(writeTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HammingPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorPorcentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorLabel))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HammingPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(send2DoHamming)
                            .addComponent(errorSetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(HammingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Hamming", HammingPanel);

        MessageLabel.setText("Message");

        MessageTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###########"))));
        MessageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageTextFieldActionPerformed(evt);
            }
        });

        PolinomioLabel.setText("Polynomial");

        PolinomioTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#####"))));

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        CrcTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Polinomio", "CRC", "Message+CRC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(CrcTable);
        if (CrcTable.getColumnModel().getColumnCount() > 0) {
            CrcTable.getColumnModel().getColumn(0).setResizable(false);
            CrcTable.getColumnModel().getColumn(1).setResizable(false);
            CrcTable.getColumnModel().getColumn(2).setResizable(false);
            CrcTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout CRCPanelLayout = new javax.swing.GroupLayout(CRCPanel);
        CRCPanel.setLayout(CRCPanelLayout);
        CRCPanelLayout.setHorizontalGroup(
            CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRCPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(CRCPanelLayout.createSequentialGroup()
                        .addGroup(CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MessageLabel)
                            .addGroup(CRCPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(MessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(69, 69, 69)
                        .addGroup(CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CRCPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(PolinomioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(GenerateButton))
                            .addComponent(PolinomioLabel))
                        .addGap(0, 358, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CRCPanelLayout.setVerticalGroup(
            CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRCPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MessageLabel)
                    .addComponent(PolinomioLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CRCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PolinomioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GenerateButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CRC", CRCPanel);

        BitsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BitsTextFieldActionPerformed(evt);
            }
        });

        MessageBitsLabel.setText("Message:");

        BitsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Letter", "Bit 0", "Bit 1", "Bit 2", "Bit 3", "Bit 4", "Bit 5", "Bit 6", "Bit 7", "Bit control"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(BitsTable);

        BitButton.setText("Bit");
        BitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BitButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(ParRadioButton);
        ParRadioButton.setText("Even");
        ParRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(ImparRadioButton);
        ImparRadioButton.setText("Odd");
        ImparRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImparRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(MessageBitsLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(BitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addComponent(ParRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ImparRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addComponent(BitButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MessageBitsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ParRadioButton)
                        .addComponent(ImparRadioButton)
                        .addComponent(BitButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Bit", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane3PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jScrollPane3PropertyChange

    }//GEN-LAST:event_jScrollPane3PropertyChange

    private void inputTableVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_inputTableVetoableChange

    }//GEN-LAST:event_inputTableVetoableChange

    private void inputTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_inputTablePropertyChange

    }//GEN-LAST:event_inputTablePropertyChange

    private void send2DoHammingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send2DoHammingActionPerformed
        updateHamming();
        setInputTable();
        setWrongHammingTable();
        setOutputTable();
        syncTables();
    }//GEN-LAST:event_send2DoHammingActionPerformed

    private void errorSetSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_errorSetSliderStateChanged
        errorPorcentLabel.setText(String.valueOf(errorSetSlider.getValue()));
    }//GEN-LAST:event_errorSetSliderStateChanged

    private void userInputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userInputTextFieldActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        String msg = MessageTextField.getText();
        String polinomio = PolinomioTextField.getText();
        CRCRules crcr = new CRCRules(msg, polinomio);
        addCrcTable(crcr);
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void BitsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BitsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BitsTextFieldActionPerformed

    private void ParRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParRadioButtonActionPerformed
        type = true;
    }//GEN-LAST:event_ParRadioButtonActionPerformed

    private void ImparRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImparRadioButtonActionPerformed
        type = false;
    }//GEN-LAST:event_ImparRadioButtonActionPerformed

    private void BitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BitButtonActionPerformed
        String inputText = BitsTextField.getText();
        addBitTable(inputText);
    }//GEN-LAST:event_BitButtonActionPerformed

    private void MessageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MessageTextFieldActionPerformed
    
    private void addBitTable(String inputText){
        DefaultTableModel model = (DefaultTableModel) BitsTable.getModel();
        
        BitRule bitRule = new BitRule(inputText, type);
        
        for (int i = 0; i < bitRule.length(); i++) {
            
            model.addRow(new String[] {bitRule.getCaracter(i),
                                            bitRule.getBits(i, 0),
                                            bitRule.getBits(i, 1),
                                            bitRule.getBits(i, 2),
                                            bitRule.getBits(i, 3),
                                            bitRule.getBits(i, 4),
                                            bitRule.getBits(i, 5),
                                            bitRule.getBits(i, 6),
                                            bitRule.getBits(i, 7),
                                            bitRule.getBitControl(i)});
            
        }
        
        
        
        BitsTable.setModel(model);
    }
    
    
    private void addCrcTable(CRCRules crc){
        DefaultTableModel model = (DefaultTableModel) CrcTable.getModel();

        model.addRow(new String[] {crc.getMsg(), crc.getPolinomio(), crc.getCRCcode(), crc.getMsgWithCrc()});
        CrcTable.setModel(model);
    }
    
    private void syncTables(){    
        jScrollPane2.setVerticalScrollBar(jScrollPane1.getVerticalScrollBar());
        jScrollPane3.setVerticalScrollBar(jScrollPane2.getVerticalScrollBar());
    }
    
    private void updateHamming(){
        hammingRules.setInputMessage(userInputTextField.getText());
        hammingRules.setPorcentError(errorSetSlider.getValue());
    }
    
    private void setWrongHammingTable(){
        DefaultTableModel model = (DefaultTableModel) setWrongHammingTable.getModel();

        for (int i = 0; i < hammingRules.getInputLenght(); i++) {
            
            model.addRow(new String[] {hammingRules.getWrongHamming(i)});
        }
        
        setWrongHammingTable.setModel(model);
    }
    
    private void setInputTable(){
        DefaultTableModel model = (DefaultTableModel) inputTable.getModel();

        for (int i = 0; i < hammingRules.getInputLenght(); i++) {
            
            model.addRow(new String[] {String.valueOf(hammingRules.getInputLetters(i)),
                                                      hammingRules.getInputBytes(i),
                                                      hammingRules.getInputHamming(i)});
        }
        
        inputTable.setModel(model);
    }
    
    private void setOutputTable(){
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        for (int i = 0; i < hammingRules.getInputLenght(); i++) {
            
            model.addRow(new String[] {String.valueOf(hammingRules.getOutputLetters(i)),
                                                      hammingRules.getOutputBytes(i),
                                                      hammingRules.getOutputError(i)});
        }
        
        outputTable.setModel(model);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Show.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Show.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Show.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Show.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Show().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BitButton;
    private javax.swing.JTable BitsTable;
    private javax.swing.JTextField BitsTextField;
    private javax.swing.JPanel CRCPanel;
    private javax.swing.JTable CrcTable;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JPanel HammingPanel;
    private javax.swing.JRadioButton ImparRadioButton;
    private javax.swing.JLabel MessageBitsLabel;
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JFormattedTextField MessageTextField;
    private javax.swing.JRadioButton ParRadioButton;
    private javax.swing.JLabel PolinomioLabel;
    private javax.swing.JFormattedTextField PolinomioTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel errorPorcentLabel;
    private javax.swing.JSlider errorSetSlider;
    private javax.swing.JTable inputTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable outputTable;
    private javax.swing.JButton send2DoHamming;
    private javax.swing.JTable setWrongHammingTable;
    private javax.swing.JTextField userInputTextField;
    private javax.swing.JLabel writeTextLabel;
    // End of variables declaration//GEN-END:variables
}
